@inherits TestContext
@using Flowbite.Blazor.Typography

@code {

    [Fact]
    public void DefaultListTest()
    {
        var cut = Render(@<div>
                                     <List Type="ListType.Unordered" class="space-y-1 text-gray-500 dark:text-gray-400">
                                         <ListItem>At least 10 characters (and up to 100 characters)</ListItem>
                                         <ListItem>At least one lowercase character</ListItem>
                                         <ListItem>Inclusion of at least one special character, e.g., ! # ?</ListItem>
                                     </List>
                         </div>);

        cut.Find("div").MarkupMatches(@<div>
                                          <ul class="list-disc list-inside space-y-1 text-gray-500 dark:text-gray-400" >
                                              <li class=" " >At least 10 characters (and up to 100 characters)</li>
                                              <li class=" " >At least one lowercase character</li>
                                              <li class=" " >Inclusion of at least one special character, e.g., ! # ?</li>
                                          </ul>
                                      </div>);
    }
    
    [Fact]
    public void OutsideListTest()
    {
        var cut = Render(@<div>
                             <List Type="ListType.Unordered" Outside="true" class="space-y-1 text-gray-500 dark:text-gray-400">
                                 <ListItem>At least 10 characters (and up to 100 characters)</ListItem>
                                 <ListItem>At least one lowercase character</ListItem>
                                 <ListItem>Inclusion of at least one special character, e.g., ! # ?</ListItem>
                             </List>
                         </div>);

        cut.Find("div").MarkupMatches(@<div>
                                          <ul class="list-disc list-outside space-y-1 text-gray-500 dark:text-gray-400" >
                                              <li class=" " >At least 10 characters (and up to 100 characters)</li>
                                              <li class=" " >At least one lowercase character</li>
                                              <li class=" " >Inclusion of at least one special character, e.g., ! # ?</li>
                                          </ul>
                                      </div>);
    }
    
    [Fact]
    public void ListWithIconsTest()
    {
        var cut = Render(@<div>
                             <List class="space-y-1 text-gray-500 dark:text-gray-400">
                                 <ListItem icon>
                                     <CheckCircleSolid class="w-3.5 h-3.5 mr-2 text-green-500 dark:text-green-400" />
                                     At least 10 characters (and up to 100 characters)
                                 </ListItem>
                                 <ListItem icon>
                                     <CheckCircleSolid class="w-3.5 h-3.5 mr-2 text-green-500 dark:text-green-400" />
                                     At least one lowercase character
                                 </ListItem>
                                 <ListItem icon>
                                     <CloseCircleSolid class="w-3.5 h-3.5 mr-2 text-gray-500 dark:text-gray-400" />
                                     Inclusion of at least one special character, e.g., ! # ?
                                 </ListItem>
                             </List>
                         </div>);

        cut.Find("div").MarkupMatches(@<div>
                                          <dl class="list-none list-inside space-y-1 text-gray-500 dark:text-gray-400" >
                                              <li class="flex items-center " >
                                                  <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" stroke-width="0" viewBox="0 0 20 20" aria-hidden="true" class="w-3.5 h-3.5 mr-2 text-green-500 dark:text-green-400">
                                                      <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"></path>
                                                  </svg>
                                                  At least 10 characters (and up to 100 characters)
                                              </li>
                                              <li class="flex items-center " >
                                                  <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" stroke-width="0" viewBox="0 0 20 20" aria-hidden="true" class="w-3.5 h-3.5 mr-2 text-green-500 dark:text-green-400">
                                                      <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"></path>
                                                  </svg>
                                                  At least one lowercase character
                                              </li>
                                              <li class="flex items-center " >
                                                  <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" stroke-width="0" viewBox="0 0 20 20" aria-hidden="true" class="w-3.5 h-3.5 mr-2 text-gray-500 dark:text-gray-400">
                                                      <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 11.793a1 1 0 1 1-1.414 1.414L10 11.414l-2.293 2.293a1 1 0 0 1-1.414-1.414L8.586 10 6.293 7.707a1 1 0 0 1 1.414-1.414L10 8.586l2.293-2.293a1 1 0 0 1 1.414 1.414L11.414 10l2.293 2.293Z"></path>
                                                  </svg>
                                                  Inclusion of at least one special character, e.g., ! # ?
                                              </li>
                                          </dl>
                                      </div>);
    }
    
    [Fact]
    public void NestedListTest()
    {
        var cut = Render(@<div>
                             <List Type="ListType.Unordered" class="space-y-4 text-gray-500 dark:text-gray-400">
                                         <ListItem>
                                             List item one
                                             <List Type="ListType.Ordered" class="pl-5 mt-2 space-y-1">
                                                 <ListItem>You might feel like you are being really "organized" o</ListItem>
                                                 <ListItem>Nested navigation in UIs is a bad idea too, keep things as flat as possible.</ListItem>
                                                 <ListItem>Nesting tons of folders in your source code is also not helpful.</ListItem>
                                             </List>
                                         </ListItem>
                                         <ListItem>
                                             List item two
                                             <List Type="ListType.Ordered" class="pl-5 mt-2 space-y-1">
                                                 <ListItem>I'm not sure if we'll bother styling more than two levels deep.</ListItem>
                                                 <ListItem>Two is already too much, three is guaranteed to be a bad idea.</ListItem>
                                                 <ListItem>If you nest four levels deep you belong in prison.</ListItem>
                                             </List>
                                         </ListItem>
                                         <ListItem>
                                             List item three
                                             <List Type="ListType.Ordered" class="pl-5 mt-2 space-y-1">
                                                 <ListItem>Again please don't nest lists if you want</ListItem>
                                                 <ListItem>Nobody wants to look at this.</ListItem>
                                                 <ListItem>I'm upset that we even have to bother styling this.</ListItem>
                                             </List>
                                         </ListItem>
                                     </List>
                         </div>);

        cut.Find("div").MarkupMatches(@<div>
                                          <ul class="list-disc list-inside space-y-4 text-gray-500 dark:text-gray-400" >
                                              <li class=" " >
                                                  List item one
                                                  <ol class="list-decimal list-inside pl-5 mt-2 space-y-1" >
                                                      <li class=" " >You might feel like you are being really "organized" o</li>
                                                      <li class=" " >Nested navigation in UIs is a bad idea too, keep things as flat as possible.</li>
                                                      <li class=" " >Nesting tons of folders in your source code is also not helpful.</li>
                                                  </ol>
                                              </li>
                                              <li class=" " >
                                                  List item two
                                                  <ol class="list-decimal list-inside pl-5 mt-2 space-y-1" >
                                                      <li class=" " >I'm not sure if we'll bother styling more than two levels deep.</li>
                                                      <li class=" " >Two is already too much, three is guaranteed to be a bad idea.</li>
                                                      <li class=" " >If you nest four levels deep you belong in prison.</li>
                                                  </ol>
                                              </li>
                                              <li class=" " >
                                                  List item three
                                                  <ol class="list-decimal list-inside pl-5 mt-2 space-y-1" >
                                                      <li class=" " >Again please don't nest lists if you want</li>
                                                      <li class=" " >Nobody wants to look at this.</li>
                                                      <li class=" " >I'm upset that we even have to bother styling this.</li>
                                                  </ol>
                                              </li>
                                          </ul>
                                      </div>);
    }
    
    [Fact]
    public void OrderedListTest()
    {
        var cut = Render(@<div>
                             <List Type="ListType.Ordered" class="space-y-1 text-gray-500 dark:text-gray-400">
                                 <ListItem><Span>Bonnie Green</Span> with <Span>70</Span> points</ListItem>
                                 <ListItem><Span>Jese Leos</Span> with <Span>63</Span> points</ListItem>
                                 <ListItem><Span>Leslie Livingston</Span> with <Span>57</Span> points</ListItem>
                             </List>
                         </div>);

        cut.Find("div").MarkupMatches(@<div>
                                         <ol class="list-decimal list-inside space-y-1 text-gray-500 dark:text-gray-400" >
                                           <li class="" >
                                             <span class="   
                                        text-gray-900 dark:text-white">Bonnie Green</span>
                                             with
                                             <span class="text-gray-900 dark:text-white">70</span>
                                             points</li>
                                           <li class=" " >
                                             <span class="text-gray-900 dark:text-white " >Jese Leos</span>
                                             with
                                             <span class="text-gray-900 dark:text-white " >63</span>
                                             points</li>
                                           <li class=" " >
                                             <span class="text-gray-900 dark:text-white " >Leslie Livingston</span>
                                             with
                                             <span class="text-gray-900 dark:text-white " >57</span>
                                             points</li>
                                         </ol>
                                       </div>);
    }
    
    [Fact]
    public void DescriptionListTest()
    {
        var cut = Render(@<div>
                             <List class="text-gray-900 dark:text-white divide-y divide-gray-200  dark:divide-gray-700">
                                 <div class="flex flex-col pb-3">
                                     <DescTerm class="mb-1">Email address</DescTerm>
                                     <Description>yourname@flowbite.com</Description>
                                 </div>
                                 <div class="flex flex-col pb-3">
                                     <DescTerm class="mb-1">Home address</DescTerm>
                                     <Description>92 Miles Drive, Newark, NJ 07103, California, USA</Description>
                                 </div>
                                 <div class="flex flex-col pb-3">
                                     <DescTerm class="mb-1">Phone number</DescTerm>
                                     <Description>+00 123 456 789 / +12 345 678</Description>
                                 </div>
                             </List>
                         </div>);

        cut.Find("div").MarkupMatches(@<div>
                                          <dl class="list-none list-inside text-gray-900 dark:text-white divide-y divide-gray-200  dark:divide-gray-700" >
                                              <div class="flex flex-col pb-3">
                                                  <dt class="text-neutral-500 md:text-lg dark:text-neutral-400  mb-1" >Email address</dt>
                                                  <dd class="text-lg font-semibold  " >yourname@flowbite.com</dd>
                                              </div>
                                              <div class="flex flex-col pb-3">
                                                  <dt class="text-neutral-500 md:text-lg dark:text-neutral-400  mb-1" >Home address</dt>
                                                  <dd class="text-lg font-semibold  " >92 Miles Drive, Newark, NJ 07103, California, USA</dd>
                                              </div>
                                              <div class="flex flex-col pb-3">
                                                  <dt class="text-neutral-500 md:text-lg dark:text-neutral-400  mb-1" >Phone number</dt>
                                                  <dd class="text-lg font-semibold  " >+00 123 456 789 / +12 345 678</dd>
                                              </div>
                                          </dl>
                                      </div>);
    }
    
    [Fact]
    public void DescriptionIconListTest()
    {
        var cut = Render(@<div>
                             <List class="text-gray-900 dark:text-white divide-y divide-gray-200  dark:divide-gray-700">
                                 <div class="flex flex-col pb-3">
                                     <DescTerm class="mb-1" Icon>
                                         <CheckCircleSolid class="w-3.5 h-3.5 mr-2 text-green-500 dark:text-green-400"/>
                                         At least 10 characters (and up to 100 characters)
                                     </DescTerm>
                                     <Description>yourname@flowbite.com</Description>
                                 </div>
                                 <div class="flex flex-col pb-3">
                                     <DescTerm class="mb-1">Home address</DescTerm>
                                     <Description Icon>
                                         <CheckCircleSolid class="w-3.5 h-3.5 mr-2 text-green-500 dark:text-green-400"/>
                                         At least 10 characters (and up to 100 characters)
                                     </Description>
                                 </div>
                             </List>
                         </div>);

        cut.Find("div").MarkupMatches(@<div>
                                          <dl class="list-none list-inside text-gray-900 dark:text-white divide-y divide-gray-200  dark:divide-gray-700" >
                                              <div class="flex flex-col pb-3">
                                                  <dt class="text-neutral-500 md:text-lg dark:text-neutral-400 flex items-center mb-1" >
                                                      <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" stroke-width="0" viewBox="0 0 20 20" aria-hidden="true" class="w-3.5 h-3.5 mr-2 text-green-500 dark:text-green-400">
                                                          <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"></path>
                                                      </svg>
                                                      At least 10 characters (and up to 100 characters)
                                                  </dt>
                                                  <dd class="text-lg font-semibold  " >yourname@flowbite.com</dd>
                                              </div>
                                              <div class="flex flex-col pb-3">
                                                  <dt class="text-neutral-500 md:text-lg dark:text-neutral-400  mb-1" >Home address</dt>
                                                  <dd class="text-lg font-semibold flex items-center " >
                                                      <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" stroke-width="0" viewBox="0 0 20 20" aria-hidden="true" class="w-3.5 h-3.5 mr-2 text-green-500 dark:text-green-400">
                                                          <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"></path>
                                                      </svg>
                                                      At least 10 characters (and up to 100 characters)
                                                  </dd>
                                              </div>
                                          </dl>
                                      </div>);
    }
    [Fact]
    public void HorizontalListTest()
    {
        var cut = Render(@<div><List class="flex flex-wrap justify-center items-center mb-6">
                               <ListItem><Span href="/" class="mr-4 md:mr-6" Color="text-gray-700 dark:text-white">About</Span>
                                         </ListItem>
                                         <ListItem>
                                             <Span href="/" class="mr-4 md:mr-6" Color="text-gray-700 dark:text-white">Premium</Span>
                                         </ListItem>
                                         <ListItem>
                                             <Span href="/" class="mr-4  md:mr-6" Color="text-gray-700 dark:text-white">Campaigns</Span>
                                         </ListItem>
                                     </List></div>);

        cut.Find("div").MarkupMatches(@<div>
                                          <dl class="list-none list-inside flex flex-wrap justify-center items-center mb-6" >
                                              <li class=" " >
                                                  <span class="text-gray-900 dark:text-white mr-4 md:mr-6" href="/" color="text-gray-700 dark:text-white" >About</span>
                                              </li>
                                              <li class=" " >
                                                  <span class="text-gray-900 dark:text-white mr-4 md:mr-6" href="/" color="text-gray-700 dark:text-white" >Premium</span>
                                              </li>
                                              <li class="" >
                                                  <span class="text-gray-900 dark:text-white mr-4  md:mr-6" href="/" color="text-gray-700 dark:text-white" >Campaigns</span>
                                              </li>
                                          </dl>
                                      </div>);
    }
}