@inherits TestContext
@using Flowbite.Blazor.Typography

@code {

    [Fact]
    public void ItalicSpanTest()
    {
        var cut = Render(@<Span Italic>Span test</Span>);

        cut.Find("span").MarkupMatches(@<span class="italic text-gray-900 dark:text-white" >Span test</span>);
    }
    
    [Fact]
    public void UnderlineSpanTest()
    {
        var cut = Render(@<div><Span Underline="true">Span test</Span><Span underline DecorationClass="decoration-green-500 decoration-dotted">requests</Span>, 
                  <Span underline DecorationClass="decoration-4 decoration-red-500 decoration-dashed">incidents</Span>, and <Span underline DecorationClass="decoration-sky-500 decoration-wavy">changes</Span></div>);

        cut.Find("div").MarkupMatches(@<div>
                                         <span class="  underline decoration-2 decoration-primary-400 dark:decoration-primary-600 
                                        text-gray-900 dark:text-white" >Span test</span>
                                         <span class="  underline decoration-green-500 decoration-dotted 
                                        text-gray-900 dark:text-white" >requests</span>,
                                         <span class="  underline decoration-4 decoration-red-500 decoration-dashed 
                                        text-gray-900 dark:text-white" >incidents</span>, and
                                         <span class="  underline decoration-sky-500 decoration-wavy 
                                        text-gray-900 dark:text-white" >changes</span>
                                       </div>);
    }
    
    [Fact]
    public void LineThroughSpanTest()
    {
        var cut = Render(@<Span LineThrough="true">Span test</Span>);

        cut.Find("span").MarkupMatches(@<span class="line-through text-gray-900 dark:text-white" >Span test</span>);
    }
    
    [Fact]
    public void UppercaseSpanTest()
    {
        var cut = Render(@<Span uppercase>Span test</Span>);

        cut.Find("span").MarkupMatches(@<span class="uppercase text-gray-900 dark:text-white" >Span test</span>);
    }
    
    [Fact]
    public void HighlightSpanTest()
    {
        var cut = Render(@<Span Highlight="true">Span test</Span>);

        cut.Find("span").MarkupMatches(@<span class="text-primary-600 dark:text-primary-500" >Span test</span>);
    }
    
    [Fact]
    public void GradientSpanTest()
    {
        var cut = Render(@<Span gradient>Span test</Span>);

        cut.Find("span").MarkupMatches(@<span class="text-transparent bg-clip-text bg-gradient-to-r to-emerald-600 from-sky-400" >Span test</span>);
    }
    
    [Fact]
    public void CustomGradientSpanTest()
    {
        var cut = Render(@<Span gradient GradientClass="text-transparent bg-clip-text bg-gradient-to-r to-orange-600 from-red-400">Span test</Span>);

        cut.Find("span").MarkupMatches(@<span class="text-transparent bg-clip-text bg-gradient-to-r to-orange-600 from-red-400" >Span test</span>);
    }
    
    [Fact]
    public void CustomHighlightSpanTest()
    {
        var cut = Render(@<Span Highlight="true" HighlightClass="text-accent-600 dark:text-accent-500">Span test</Span>);

        cut.Find("span").MarkupMatches(@<span class="text-accent-600 dark:text-accent-500" >Span test</span>);
    }
    
    [Fact]
    public void SpanUserAttributesTest()
    {
        var cut = Render(@<Span style="max-width: 64rem;" customatt="something">
                             This example can be used.
                         </Span>);

        cut.Find("span").MarkupMatches(@<span class="text-gray-900 dark:text-white" style="max-width: 64rem;" customatt="something" >
                                        This example can be used.
                                    </span>);
    }
}