@using System.Diagnostics.CodeAnalysis
@inherits Flowbite.Blazor.Forms.Base.BaseInput<bool>
<div class="@(Bordered ? $"pl-4 border border-neutral-200 {RoundedClass} dark:border-neutral-700" : "") @Class">
    <div class="flex items-center">
        <input @ref="@ElementRef" id="@Id" type="checkbox" @bind-value="@CurrentValue" checked="@CurrentValue" @bind-value:after="@Clicked" @attributes=@AdditionalAttributes disabled="@Disabled"
               class="@(Advanced ? "hidden peer" : $"checkbox checkbox-{Color?.ToLower()}") @CssClass">
    
        @if (Label is null)
        {
            <label for="@Id" class="@Spacing @(Bordered ? "w-full py-4" : "") text-sm font-medium @(Disabled ? "text-neutral-400 dark:text-neutral-500" : "text-neutral-900 dark:text-neutral-300")">
                @LabelText
            </label>
        }
        else
        {
            @if (Advanced)
            {
                <label for="@Id" class="@(AdvancedClass ?? "inline-flex items-center justify-between w-full p-5 text-neutral-500 bg-white border-2 border-neutral-200 rounded-lg cursor-pointer dark:hover:text-neutral-300 dark:border-neutral-700 peer-checked:border-primary-600 hover:text-neutral-600 dark:peer-checked:text-neutral-300 peer-checked:text-neutral-600 hover:bg-neutral-50 dark:text-neutral-400 dark:bg-neutral-800 dark:hover:bg-neutral-700")">                           
                    @Label
                </label>
            }
            else
            {
                <label for="@Id" class="@Spacing @(Bordered ? "w-full py-4" : "")">
                    @Label
                </label>
            }
        }
    </div>
    @if (Description is not null)
    {
        @Description
    }
    else if (!string.IsNullOrWhiteSpace(DescriptionText))
    {
        <div class="text-xs font-normal text-neutral-500 dark:text-neutral-300 pl-7 @(Bordered ? "-mt-4 pb-4" : "")">@DescriptionText</div>
    }
    @if (EditContext != default!)
    {
        @if (ShowError)
        {
            @foreach (var message in EditContext.GetValidationMessages(FieldIdentifier))
            {
                <div class="pl-7 text-xs text-danger-600 dark:text-danger-500 @(Bordered ? "-mt-4 pb-4" : "")">
                    @message
                </div>
            }
        }
        @if (Success() && !string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="pl-7 text-xs text-success-600 dark:text-success-500">@SuccessMessage</div>
        }
    }
</div>

@code {
    /// <summary>
    /// RenderFragment to define a completely custom label
    /// </summary>
    [Parameter]
    public RenderFragment? Label { get; set; }
    
    /// <summary>
    /// Defines the color of the checkbox when checked. Options are primary, supporting, accent, warning, danger, and success.
    /// </summary>
    [Parameter]
    public string? Color { get; set; } = "primary";
    
    /// <summary>
    /// Defines whether there is a border and the label area is expanded
    /// </summary>
    [Parameter]
    public bool Bordered { get; set; }
    
    /// <summary>
    /// Defines whether to use "advanced" settings and hide the default checkbox
    /// </summary>
    [Parameter]
    public bool Advanced { get; set; }
    
    /// <summary>
    /// Defines the class for when the checkbox should be hidden to create an "advanced checkbox"
    /// </summary>
    [Parameter]
    public string? AdvancedClass { get; set; }

    /// <summary>
    /// Triggered when the value changes and sends the value when invoked
    /// </summary>
    [Parameter]
    public EventCallback<bool> OnChanged { get; set; }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        RoundedClass = "rounded";
        Spacing = "ml-2";
    }

    /// <summary>
    /// Triggered when value changes to invoke callback
    /// </summary>
    private async Task Clicked()
    {
        await OnChanged.InvokeAsync(CurrentValue);
    }

    /// <inheritdoc />
    protected override bool TryParseValueFromString(string? value, out bool result, [NotNullWhen(false)] out string? validationErrorMessage)
        => throw new NotSupportedException($"This component does not parse string inputs. Bind to the '{nameof(CurrentValue)}' property, not '{nameof(CurrentValueAsString)}'.");

}