@using System.ComponentModel.DataAnnotations
@using System.Reflection
@inherits Flowbite.Blazor.Forms.Base.CheckboxBase
<div class="@(Bordered ? $"pl-4 border border-neutral-200 {RoundedClass} dark:border-neutral-700" : "") @Class">
    <div class="flex items-center">
        <input @ref="@ElementRef" id="@ElementId" type="checkbox" checked="@_isChecked" @oninput="Clicked" @attributes=@UserAttributes disabled="@Disabled"
               class="@(Advanced ? "hidden peer" : $"checkbox checkbox-{Color.ToLower()}")">
    
        @if (Label is null)
        {
            <label for="@ElementId" class="@Spacing @(Bordered ? "w-full py-4" : "") text-sm font-medium @(Disabled ? "text-neutral-400 dark:text-neutral-500" : "text-neutral-900 dark:text-neutral-300")">
                @LabelText
            </label>
        }
        else
        {
            @if (Advanced)
            {
                <label for="@ElementId" @onclick="AdvancedClick" class="@(AdvancedClass ?? "inline-flex items-center justify-between w-full p-5 text-neutral-500 bg-white border-2 border-neutral-200 rounded-lg cursor-pointer dark:hover:text-neutral-300 dark:border-neutral-700 peer-checked:border-primary-600 hover:text-neutral-600 dark:peer-checked:text-neutral-300 peer-checked:text-neutral-600 hover:bg-neutral-50 dark:text-neutral-400 dark:bg-neutral-800 dark:hover:bg-neutral-700")">                           
                    @Label
                </label>
            }
            else
            {
                <label for="@ElementId" class="@Spacing @(Bordered ? "w-full py-4" : "")">
                    @Label
                </label>
            }
        }
    </div>
    @if (Description is not null)
    {
        @Description
    }
    else if (!string.IsNullOrWhiteSpace(DescriptionText))
    {
        <div class="text-xs font-normal text-neutral-500 dark:text-neutral-300 pl-7 @(Bordered ? "-mt-4 pb-4" : "")">@DescriptionText</div>
    }
</div>

@code{
    /// <summary>
    /// Defines whether there is a border and the label area is expanded
    /// </summary>
    [Parameter]
    public bool Bordered { get; set; }
    
    /// <summary>
    /// Defines whether to use "advanced" settings and hide the default checkbox
    /// </summary>
    [Parameter]
    public bool Advanced { get; set; }
    
    /// <summary>
    /// Defines the class for when the checkbox should be hidden to create an "advanced checkbox"
    /// </summary>
    [Parameter]
    public string? AdvancedClass { get; set; }

    /// <summary>
    /// Defines the rounding class for the border when <see cref="Bordered"/> is true
    /// </summary>
    [Parameter]
    public string RoundedClass { get; set; } = "rounded";
    
    /// <summary>
    /// The text shown as a description under the input. This text will be overridden by any content in
    /// the <see cref="Description"/> fragment. This will use Description from the DisplayAttribute if defined. 
    /// </summary>
    [Parameter] public string? DescriptionText { get; set; }
    
    /// <summary>
    /// Defines the spacing for the input div. Default is (ml-2). 
    /// </summary>
    [Parameter] public string Spacing { get; set; } = "ml-2";
    
    /// <summary>
    /// Used to display a description under the input as more than a simple string like with <see cref="DescriptionText"/>
    /// </summary>
    [Parameter] public RenderFragment? Description { get; set; }
    
    /// <summary>
    /// Sets necessary fields/parameters whenever parameters change
    /// </summary>
    protected override Task OnParametersSetAsync()
    {
        try
        {
            if (AttributeModel is not null && AttributeField is not null && AttributeModel.GetType()
                .GetProperty(AttributeField)?
                .GetCustomAttribute(typeof(DisplayAttribute)) is DisplayAttribute displayAttribute)
            {
                var desc = displayAttribute.Description;
                if (!string.IsNullOrEmpty(desc) && string.IsNullOrEmpty(DescriptionText))
                {
                    DescriptionText = desc;
                }
            }
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
        return base.OnParametersSetAsync();
    }
    
    /// <summary>
    /// Triggered when value changes to invoke callback
    /// </summary>
    private async Task AdvancedClick()
    {
        bool value = !_isChecked;
        Checked = value;
        await OnChanged.InvokeAsync(value);
    }

}