@using Flowbite.Blazor.Forms.Base
@using System.Reflection.Emit
@using System.Diagnostics.CodeAnalysis
@using System.Diagnostics
@inherits BaseFloatingLabel<string>

<div class="@Class">
    <div class="relative @(FloatType == FloatType.Standard ? "z-0" : "")">
        <input @onfocus="@(() => ShowError = true)" @attributes=@AdditionalAttributes type="@Type" value="@CurrentValue" @oninput="Changed" id="@Id" disabled="@Disabled"
               class="@BaseInputClasses @InputClass @InputSize @GetColorClass()" placeholder=""/>
        <label for="@Id" class="@BaseClass @LabelClass @LabelSize @(Disabled ? "text-neutral-400 dark:text-neutral-500" : GetLabelClass())">@LabelText</label>
    </div>
    <DescriptionDisplay TValue="string" Input="@this"></DescriptionDisplay>
    @if (EditContext != default!)
    {
        <ValidationDisplay TValue="string" Class="text-xs mt-2 font-semibold" Input="@this" Errors="EditContext.GetValidationMessages(FieldIdentifier)"/>
    }
</div>

@code {
    
    /// <summary>
    /// Handle the change event, set the value, and raise the OnChanged event
    /// </summary>
    private async Task Changed(ChangeEventArgs evt)
    {
        if (evt.Value is not null)
        {
            CurrentValue = evt.Value.ToString();
            await OnChanged.InvokeAsync(CurrentValue);
        }
    }
    
    /// <inheritdoc />
    protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

}