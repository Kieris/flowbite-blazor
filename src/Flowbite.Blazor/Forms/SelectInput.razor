@typeparam TItem
@using System.Reflection
@using Flowbite.Blazor.Forms.Base
@inherits BaseSelect<TItem>
<style>
    .btm-border {
        border-style: none none solid none;
    }
</style>
<div class="@(Class ?? "w-full")">
    @if(MessageTop)
    {
        <DescriptionDisplay TValue="@TItem" Input="@this"></DescriptionDisplay>
        @if (EditContext != default!)
        {
            <ValidationDisplay TValue="@TItem" Input="@this" Errors="EditContext.GetValidationMessages(FieldIdentifier)"/>
        }
    }
    @if (!string.IsNullOrWhiteSpace(LabelText) && IncludeLabel)
    {
        <label for="@Id" class="block mb-2 text-sm font-medium @GetLabelColor()">
            @LabelText
        </label>
    }
    <select id="@Id" @ref="@ElementRef" multiple="@IsMultipleSelect" size="@Rows" @onchange="@OnChangedEvent" disabled="@Disabled" placeholder="@Placeholder"
            class="block @_size w-full @(Underline ? $"text-neutral-500 border-2 btm-border border-neutral-200 appearance-none dark:text-neutral-400 dark:border-neutral-700 focus:outline-none focus:ring-0 focus:border-neutral-200 peer {UnderlineBackground}" : ColorClass ?? GetNormalClass()) @RoundedClass @CssClass"
            @attributes="@AdditionalAttributes" value="@BindConverter.FormatValue(CurrentValue)?.ToString()">
        @ChildContent
    </select>
    @if (!MessageTop)
    {
        <DescriptionDisplay TValue="@TItem" Input="@this"></DescriptionDisplay>
        @if (EditContext != default!)
        {
            <ValidationDisplay TValue="@TItem" Input="@this" Errors="EditContext.GetValidationMessages(FieldIdentifier)"/>
        }
    }
</div>

@code {
    /// <summary>
    /// Initializes the component and sets some parameter specific styles
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Underline)
        {
            RoundedClass = "rounded-none";
            switch (Size)
            {
                case InputSizes.Large:
                    _size = "py-4 px-0 sm:text-base";
                    break;
                case InputSizes.Small:
                    _size = "py-2 px-0 sm:text-xs";
                    break;
                default:
                    _size = "py-2.5 px-0";
                    break;
            }
        }
    }

    /// <summary>
    /// Triggered when the selection changes
    /// </summary>
    private async Task OnChangedEvent(ChangeEventArgs evt)
    {
        if (IsMultipleSelect)
        {
            string?[]? value = evt.Value as string[];
            SetCurrentValueAsStringArray(value);
            await OnChanged.InvokeAsync(value);
        }
        else
        {
            string? value = evt.Value as string;
            CurrentValueAsString = value;
            await OnChanged.InvokeAsync(value);
        }
    }
}