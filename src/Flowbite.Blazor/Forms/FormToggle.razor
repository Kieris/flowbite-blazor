@using System.Diagnostics.CodeAnalysis
@using System.Reflection
@using System.Reflection.Emit
@using System.ComponentModel.DataAnnotations
@inherits InputBase<bool>
<div class="@Class">
    <label class="relative inline-flex items-center cursor-pointer">
         @if (LabelLeft)
         {
             <span class="mr-3 text-sm font-medium @(Disabled ? "text-neutral-400 dark:text-neutral-500" : "text-neutral-900 dark:text-neutral-300")">
                 @if (Label is null)
                 {
                     @LabelText
                 }
                 else
                 {
                     @Label
                 }
             </span>
         }
        <input @ref="@ElementRef" id="@Id" type="checkbox" class="sr-only peer @CssClass" @bind-value="@CurrentValue" checked="@CurrentValue" @bind-value:after="@Clicked"
               @attributes=@AdditionalAttributes disabled="@Disabled">
         <div class="bg-neutral-200 peer-focus:outline-none peer-focus:ring-4 after:bg-white after:border-neutral-300 after:border after:rounded-full after:transition-all dark:border-neutral-600 rounded-full peer dark:bg-neutral-700 peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] 
@(LabelLeft ? "toggle-right" : "toggle-left") toggle-@Color.ToLower() toggle-@Size.ToString().ToLower()"></div>
        @if (!LabelLeft)
        {
            <span class="ml-3 text-sm font-medium @(Disabled ? "text-neutral-400 dark:text-neutral-500" : "text-neutral-900 dark:text-neutral-300")">
                @if (Label is null)
                {
                    @LabelText
                }
                else
                {
                    @Label
                }
            </span>
        }
    </label>
    @if (ShowError)
    {
        @foreach (var message in EditContext.GetValidationMessages(FieldIdentifier))
        {
            <div class="text-xs text-danger-600 dark:text-danger-500">
                @message
            </div>
        }
    }
    @if(Success() && !string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="text-xs text-success-600 dark:text-success-500">@SuccessMessage</div>
    }
</div>

@code {
    /// <summary>
    /// Defines if the label is on the left or right. Default is false (label on the right).
    /// </summary>
    [Parameter]
    public bool LabelLeft { get; set; } = false;
    
    /// <summary>
    /// The style classes for the top level div of the element.
    /// </summary>
    [Parameter] public string? Class { get; set; }
    
    /// <summary>
    /// RenderFragment to define a completely custom label
    /// </summary>
    [Parameter]
    public RenderFragment? Label { get; set; }
    
    /// <summary>
    /// Defines the text, if any, shown for the label. This will use Name from the DisplayAttribute if defined.
    /// </summary>
    [Parameter] public string? LabelText { get; set; }
    
    /// <summary>
    /// Defines whether to show validation errors. The default is true.
    /// </summary>
    [Parameter]
    public bool ShowError { get; set; } = true;
    
    /// <summary>
    /// Defines the color of the checkbox when checked. Options are primary, supporting, accent, warning, danger, and success.
    /// </summary>
    [Parameter]
    public string Color { get; set; } = "primary";
    
    /// <summary>
    /// Defines a success message for when the input value is valid
    /// </summary>
    [Parameter] public string? SuccessMessage { get; set; }
    
    /// <summary>
    /// Defines the size of the toggle. Default is medium.
    /// </summary>
    [Parameter] public InputSizes Size { get; set; } = InputSizes.Medium;
    
    /// <summary>
    /// Defines whether the input is disabled
    /// </summary>
    [Parameter] public bool Disabled { get; set; }
    
    /// <summary>
    /// Gets or sets the reference to the rendered element.
    /// </summary>
    public ElementReference ElementRef { get; set; }
    
    /// <summary>
    /// Triggered when the value changes and sends the value when invoked
    /// </summary>
    [Parameter]
    public EventCallback<bool> OnChanged { get; set; }
    
    /// <summary>
    /// The id of the input which is used to connect label and input. The default is Guid.NewGuid().
    /// </summary>
    [Parameter]
    public string? Id { get; set; } = Guid.NewGuid().ToString();

    /// <summary>
    /// Sets necessary fields/parameters whenever parameters change
    /// </summary>
    protected override Task OnParametersSetAsync()
    {
        try
        {
            if (this.FieldIdentifier.Model.GetType()
                .GetProperty(this.FieldIdentifier.FieldName)?
                .GetCustomAttribute(typeof(DisplayAttribute)) is DisplayAttribute displayAttribute)
            {
                var displayName = displayAttribute.Name;
                if (!string.IsNullOrEmpty(displayName) && string.IsNullOrEmpty(LabelText))
                {
                    LabelText = displayName;
                }
            }
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
        return base.OnParametersSetAsync();
    }
    
    /// <summary>
    /// Triggered when value changes to invoke callback
    /// </summary>
    internal async Task Clicked()
    {
        await OnChanged.InvokeAsync(CurrentValue);
    }
    
    /// <summary>
    /// Returns whether input is valid which also affects text color (green)
    /// </summary>
    internal bool Success() => CssClass.Contains("modified") && !EditContext.GetValidationMessages(FieldIdentifier).Any();
    
    /// <inheritdoc />
    protected override bool TryParseValueFromString(string? value, out bool result, [NotNullWhen(false)] out string? validationErrorMessage)
        => throw new NotSupportedException($"This component does not parse string inputs. Bind to the '{nameof(CurrentValue)}' property, not '{nameof(CurrentValueAsString)}'.");
}