
<div class="@(Bordered ? $"pl-4 border border-neutral-200 {RoundedClass} dark:border-neutral-700" : "") @Class">
    <div class="flex items-center">
        <InputRadio @ref="@ElementRef" id="@Id" Value="@Value" @attributes=@AdditionalAttributes disabled="@Disabled"
                    class="@_class" @onclick="@Clicked"/>
    
        @if (Label is null)
        {
            <label for="@Id" class="@Spacing @(Bordered ? "w-full py-4" : "") text-sm font-medium @(Disabled ? "text-neutral-400 dark:text-neutral-500" : "text-neutral-900 dark:text-neutral-300")">
                @LabelText
            </label>
        }
        else
        {
            @if (Advanced)
            {
                <label for="@Id" class="@(AdvancedClass ?? "inline-flex items-center justify-between w-full p-5 text-neutral-500 bg-white border-2 border-neutral-200 rounded-lg cursor-pointer dark:hover:text-neutral-300 dark:border-neutral-700 peer-checked:border-primary-600 hover:text-neutral-600 dark:peer-checked:text-neutral-300 peer-checked:text-neutral-600 hover:bg-neutral-50 dark:text-neutral-400 dark:bg-neutral-800 dark:hover:bg-neutral-700")">                           
                   @Label
                </label>
            }
            else
            {
                <label for="@Id" class="@Spacing @(Bordered ? "w-full py-4" : "")">
                    @Label
                </label>
            }
        }
    </div>
    @if (Description is not null)
    {
        @Description
    }
    else if (!string.IsNullOrWhiteSpace(DescriptionText))
    {
        <div class="text-xs font-normal text-neutral-500 dark:text-neutral-300 pl-6 @(Bordered ? "-mt-4 pb-4" : "")">@DescriptionText</div>
    }

</div>

@code {
    ///<summary>
    /// Reference to the InputRadio component
    /// </summary>
    public InputRadio<object?> ElementRef = new();
    
    /// <summary>
    /// Defines the text, if any, shown for the label. This will use Name from the DisplayAttribute if defined.
    /// </summary>
    [Parameter] public string? LabelText { get; set; }
    
    ///<summary>
    /// The value of the radio button which will sync with parent <see cref="InputRadioGroup{TValue}"/> when checked
    /// </summary>
    [Parameter]
    public object? Value { get; set; }
    
    /// <summary>
    /// The style classes for the top level div of the element.
    /// </summary>
    [Parameter] public string? Class { get; set; }
    
    /// <summary>
    /// The id for the input element
    /// </summary>
    [Parameter]
    public string Id { get; set; } = Guid.NewGuid().ToString();
    
    /// <summary>
    /// Defines whether the input is disabled
    /// </summary>
    [Parameter] public bool Disabled { get; set; }
    
    /// <summary>
    /// Used to display a description under the input as more than a simple string like with <see cref="DescriptionText"/>
    /// </summary>
    [Parameter] public RenderFragment? Description { get; set; }
    
    /// <summary>
    /// RenderFragment to define a completely custom label
    /// </summary>
    [Parameter]
    public RenderFragment? Label { get; set; }
    
    /// <summary>
    /// Attributes added to the component that don't match any of its parameters. Attributes with name style or class
    /// will be appended to Style and Class attributes if they are a string
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = new ();
    
    /// <summary>
    /// Defines the color of the checkbox when checked. Options are primary, supporting, accent, warning, danger, and success.
    /// </summary>
    [Parameter]
    public string? CheckColor { get; set; } = "primary";
    
    /// <summary>
    /// Defines whether there is a border and the label area is expanded
    /// </summary>
    [Parameter]
    public bool Bordered { get; set; }
    
    /// <summary>
    /// Defines whether to use "advanced" settings and hide the default checkbox
    /// </summary>
    [Parameter]
    public bool Advanced { get; set; }
    
    /// <summary>
    /// Defines the class for when the checkbox should be hidden to create an "advanced checkbox"
    /// </summary>
    [Parameter]
    public string? AdvancedClass { get; set; }

    /// <summary>
    /// Defines the rounding class for the border when <see cref="Bordered"/> is true
    /// </summary>
    [Parameter]
    public string RoundedClass { get; set; } = "rounded";
    
    /// <summary>
    /// The text shown as a description under the input. This text will be overridden by any content in
    /// the <see cref="Description"/> fragment. This will use Description from the DisplayAttribute if defined. 
    /// </summary>
    [Parameter] public string? DescriptionText { get; set; }
    
    /// <summary>
    /// Defines the spacing for the input div. Default is (ml-2). 
    /// </summary>
    [Parameter] public string Spacing { get; set; } = "ml-2";

    /// <summary>
    /// Triggered when the radio is clicked and sends the value when invoked
    /// </summary>
    [Parameter]
    public EventCallback<object?> OnClicked { get; set; }

    /// <summary>
    /// The class of the InputRadio
    /// </summary>
    private string _class = string.Empty;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        _class = Advanced ? "hidden peer" : $"radio checkbox-{CheckColor?.ToLower()}";
        base.OnInitialized();
    }

    /// <summary>
    /// Triggered when value changes to invoke callback
    /// </summary>
    private async Task Clicked()
    {
        await OnClicked.InvokeAsync(Value);
    }

}