@using Flowbite.Blazor.SharedEnums
@inherits ButtonBase

<button type="@Type" disabled="@Disabled" 
        class="@(Disabled ? "cursor-not-allowed" : "") btn-base @ColorClass @BtnSize @(string.IsNullOrWhiteSpace(Class) ? $"{TypeClass}": Class)" 
        style="@Style" @onclick="OnClick">
    @ChildContent
</button>


@code {
    /// <summary>
    /// Defines the color for the button based on <see cref="Colors"/> enum
    /// </summary>
    [Parameter]
    public Colors Color { get; set; } = Colors.Primary;

    /// <summary>
    /// Initializes the button and sets the color classes based on <see cref="Color"/>
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();
        ColorClass = GetColorClass();
    }

    /// <summary>
    /// Sets the color class based on <see cref="ButtonBase.Outline"/> and <see cref="Color"/>
    /// </summary>
    private string GetColorClass()
    {
        if (!Outline)
        {
            switch (Color)
            {
                case Colors.Primary:
                    return "btn-default";
                case Colors.Alternative:
                    return "btn-alternative";
                case Colors.Neutral:
                    return "btn-dark";
                case Colors.Light:
                    return "btn-light";
                case Colors.Success:
                    return "btn-green";
                case Colors.Danger:
                    return "btn-red";
                case Colors.Warning:
                    return "btn-yellow";
                case Colors.Supporting:
                    return "btn-purple";
                default:
                    return string.Empty;
            }
        }
        else
        {
            switch (Color)
            {
                case Colors.Primary:
                    return "btn-ol-default";
                case Colors.Alternative:
                    return "btn-ol-alternative";
                case Colors.Neutral:
                    return "btn-ol-dark";
                case Colors.Light:
                    return "btn-ol-light";
                case Colors.Success:
                    return "btn-ol-green";
                case Colors.Danger:
                    return "btn-ol-red";
                case Colors.Warning:
                    return "btn-ol-yellow";
                case Colors.Supporting:
                    return "btn-ol-purple";
                default:
                    return string.Empty;
            }
        }
    }
}