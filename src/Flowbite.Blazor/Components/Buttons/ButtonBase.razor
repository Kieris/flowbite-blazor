@inherits BaseComponent
@using SharedEnums

@code {
    /// <summary>
    /// The element that makes up the body of the button
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    
    /// <summary>
    /// The type of the button based on html types (submit, reset, button, etc.). The default is button.
    /// </summary>
    [Parameter]
    public string Type { get; set; } = "button";

    /// <summary>
    /// The style type for the button based on <see cref="ButtonTypes"/>
    /// </summary>
    [Parameter]
    public ButtonTypes StyleType { get; set; } = ButtonTypes.Normal;

    /// <summary>
    /// Defines the size of the button based on the <see cref="Sizes"/> enum
    /// </summary>
    [Parameter]
    public Sizes Size { get; set; } = Sizes.Base;
    
    /// <summary>
    /// If true, the button will have the outline style
    /// </summary>
    [Parameter]
    public bool Outline { get; set; }
    
    /// <summary>
    /// Defines whether or not the button is disabled
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// Event callback for click events
    /// </summary>
    [Parameter]
    public EventCallback OnClick { get; set; }
    
    /// <summary>
    /// The constructed final color class of the button
    /// </summary>
    protected string ColorClass = string.Empty;
    /// <summary>
    /// The constructed final Style type class of the button
    /// </summary>
    protected string TypeClass = string.Empty;
    /// <summary>
    /// The constructed final size class of the button
    /// </summary>
    protected string BtnSize = string.Empty;

    /// <summary>
    /// Watches for parameter changes on the button and sets styles appropriately
    /// </summary>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        TypeClass = GetTypeClass();
        BtnSize = GetSize();
        
        if (UserAttributes.ContainsKey("pill"))
        {
            StyleType = ButtonTypes.Pill;
        }
        StateHasChanged();
    }

    /// <summary>
    /// Sets the class for the style type
    /// </summary>
    private string GetTypeClass()
    {
        switch (StyleType)
        {
            case ButtonTypes.Normal:
                return "rounded-lg";
            case ButtonTypes.Pill:
                 return "rounded-full";
                default: return "rounded-lg";
        }
    }

    /// <summary>
    /// Sets the class for the size of the button
    /// </summary>
    private string GetSize()
    {
        switch (Size)
        {
            case Sizes.ExtraSmall:
                return "btn-xs";
            case Sizes.Small:
                return "btn-sm";
            case Sizes.Base:
                return "btn-base-size";
            case Sizes.Large:
                return "btn-lg";
            case Sizes.ExtraLarge:
                return "btn-xl";
            case Sizes.Icon:
                return "btn-icon";
            default:
                return "btn-base-size";
        }
    }

    /// <summary>
    /// Invokes the callback for when the button is clicked
    /// </summary>
    private void BtnClicked()
    {
        OnClick.InvokeAsync();
    }

}