@inherits BaseComponent

@if(Open)
{                                                                   
  <div tabindex="-1" class="@Position.ToString().ToLower() @_divClasses[Type] z-10 flex justify-between p-4 dark:bg-gray-700 dark:border-gray-600 
   @Class" style="@Style" @attributes="@UserAttributes">
    <div>
    @Header
    </div>
    <div class="flex @_innerDivClasses[Type] @InnerClass">
      @ChildContent
    </div>

    @if (Dismissable)
    {
      <div class="flex items-center">
        <button @onclick="@Close" type="button" class="flex-shrink-0 inline-flex justify-center w-7 h-7 items-center text-gray-400 hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 dark:hover:bg-gray-600 dark:hover:text-white">
          <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
          </svg>
          <span class="sr-only">Close banner</span>
        </button>
      </div>
    }
  </div>
}

@* ReSharper disable once NotAccessedField.Compiler *@
@code {
    /// <summary>
    /// Defines if the banner can be dismissed
    /// </summary>
    [Parameter]
    public bool Dismissable { get; set; } = true;
 
    /// <summary>
    /// Defines if the banner is open
    /// </summary>
    [Parameter]
    public bool Open { get; set; } = true;
    
    /// <summary>
    /// Main content of the banner
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
  
    /// <summary>
    /// Header of the banner
    /// </summary>
    [Parameter]
    public RenderFragment? Header { get; set; }
  
    /// <summary>
    /// Position of the banner
    /// </summary>
    [Parameter]
    public BannerPosition Position { get; set; }

    /// <summary>
    /// Type of the banner
    /// </summary>
    [Parameter]
    public BannerType Type { get; set; }
  
    /// <summary>
    /// Inner class of the banner
    /// </summary>
    [Parameter]
    public string InnerClass { get; set; } = string.Empty;

    /// <summary>
    /// Div classes of the banner based on banner type
    /// </summary>
    private readonly Dictionary<BannerType, string> _divClasses = new();
    /// <summary>
    /// Inner div classes of the banner based on banner type
    /// </summary>
    private readonly Dictionary<BannerType, string> _innerDivClasses = new();
    
    /// <summary>
    /// Ensure classes of the banner are added by tailwind
    /// </summary>
    private readonly string _ensureClasses = "static absolute sticky fixed relative";

    /// <inheritdoc />
    protected override void OnInitialized()
    {
      _divClasses.Add(BannerType.Default, "top-0 left-0 w-full border-b border-gray-200 bg-gray-50");
      _divClasses.Add(BannerType.Bottom, "bottom-0 left-0 w-full border-t border-gray-200 bg-gray-50");
      _divClasses.Add(BannerType.Cta, "bg-white border border-gray-100 rounded-lg shadow-sm left-1/2 top-6 flex-col md:flex-row w-[calc(100%-2rem)] -translate-x-1/2 lg:max-w-7xl");
      _divClasses.Add(BannerType.Signup, "top-0 left-0 w-full border-b border-gray-200 bg-gray-50");
      _divClasses.Add(BannerType.Info, "top-0 left-0 flex-col w-full border-b border-gray-200 bg-gray-50 md:flex-row");
      
      _innerDivClasses.Add(BannerType.Default, "items-center mx-auto");
      _innerDivClasses.Add(BannerType.Bottom, "items-center mx-auto");
      _innerDivClasses.Add(BannerType.Cta, "flex-col items-start mb-3 mr-4 md:items-center md:flex-row md:mb-0");
      _innerDivClasses.Add(BannerType.Signup, "items-center flex-shrink-0 w-full mx-auto sm:w-auto");
      _innerDivClasses.Add(BannerType.Info, "items-center flex-shrink-0 md:items-center md:flex-row md:mb-0");
    }

    /// <summary>
    /// Close the banner
    /// </summary>
    private void Close()
    {
      Open = false;
    }
}