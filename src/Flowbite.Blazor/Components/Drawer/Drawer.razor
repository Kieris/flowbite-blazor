@using Flowbite.Blazor.SharedEnums
@inherits Frame
@if (!Hidden)
{
    @if (Backdrop && ClickOutsideClose)
    {
        <div role="presentation" class="fixed top-0 left-0 z-50 w-full h-full @(Backdrop ? "bg-gray-900 bg-opacity-75" : "")" @onclick="@HandleDrawer"></div>
    }
    else if (Backdrop && !ClickOutsideClose)
    {
        <div role="presentation" class="fixed top-0 left-0 z-50 w-full h-full @(Backdrop ? "bg-gray-900 bg-opacity-75" : "") "></div>
    }
}
<div class="overflow-y-auto transition-translate duration-500 @_translate z-50 p-4 bg-white dark:bg-gray-800 
    @(Absolute ? Hidden ? "absolute hidden": "absolute" :"fixed") @GetPlacement() @Class" 
         tabindex="-1" aria-controls="drawer" aria-labelledby="drawer">
        @ChildContent
  </div>


@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    
  [Parameter]
  public bool Hidden { get; set; } = true;

  [Parameter]
  public bool Backdrop { get; set; } = true;
    
    [Parameter]
    public bool Absolute { get; set; }

    [Parameter]
    public Placement Placement { get; set; } = Placement.Left;

    [Parameter]
    public string LeftOffset { get; set; } = "top-0 left-0 h-full w-80";
    
    [Parameter]
    public string BottomOffset { get; set; } = "left-0 bottom-0 w-full h-64";
    
    [Parameter]
    public string TopOffset { get; set; } = "top-0 left-0 w-full h-64";
    
    [Parameter]
    public string RightOffset { get; set; } = "top-0 right-0 h-full w-80";

  [Parameter]
  public bool ClickOutsideClose { get; set; } = true;

    private string _translate = "-translate-x-full";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SetTrans();
    }

    private string GetPlacement()
    {
        switch (Placement)
        {
            case Placement.Top:
                return TopOffset;
            case Placement.Bottom:
                return BottomOffset;
                case Placement.Right:
                    return RightOffset;
                        default:
                            return LeftOffset;
        }
    }

    private void HandleDrawer()
    {
        if (!Hidden)
        {
            Hide();
        }
        else
        {
            Show();
        }
    }

    public void Show()
    {
        _translate = "translate-x-0";
        Hidden = false;
        StateHasChanged();
    }

    public void Hide()
    {
        SetTrans();
        Hidden = true;
    }

    private void SetTrans()
    {
        switch (Placement)
        {
            case Placement.Bottom:
                _translate = "translate-y-full";
                break;
            case Placement.Right:
                _translate = "translate-x-full";
                break;
            case Placement.Top:
                _translate = "-translate-y-full";
                break;
            default:
                _translate = "-translate-x-full";
                break;
        }
    }
}