@using System.Text
@using Microsoft.Extensions.Primitives
@inherits Frame

<div class="@Class">
  <h2 class="group">
    <button @onclick="@HandleToggle" type="button"
            class="accordion-item accordion-item-border @(First ? "border-t rounded-t-xl" : "")
            @(_open ? $"accordion-btn-active {ActiveClass}" : $"{InactiveClass}")
            @(_open && CheckFlush() ? _textFlushOpen : "") @(!_open && CheckFlush() ? _textFlushDefault : "")"
            aria-expanded="@(_open)">
      @if(Header is not null) 
      {
        @Header
      }
      @if (_open)
      {
        <div name="arrowup">
          <svg class="w-3 h-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5"/>
          </svg>
        </div>
      }
      else
      {
        <div name="arrowdown">
          <svg class="w-3 h-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
          </svg>
        </div>
      }
    </button>
  </h2>
  @if (_open)
  {
    <div>
      <div class="@_contentClass accordion-collapse-body">
        @Body
      </div>
    </div>
  }
  else 
  {
    <div class="hidden">
      <div class="@_contentClass @(_open ? "border-b" : "border-b-0") accordion-collapse-body">
        @Body
      </div>
    </div>
  }
</div>

@code {
    [CascadingParameter]
    private Accordion? Parent { get; set; }

    [Parameter]
    public RenderFragment? Header { get; set; }

    [Parameter]
    public RenderFragment? Body { get; set; }

    /// <summary>
    /// This needs to be better...
    /// </summary>
    [Parameter]
    public bool First { get; set; }

    private bool _open = false;
    private string _paddingFlush = "accordion-item-btn-flush-pd";
    private string _paddingDefault = "accordion-item-btn-flush-def";
    private string _textFlushOpen = "accordion-item-flush-open";
    private string _textFlushDefault = "accordion-item-flush-def";
    private string _borderClass = "accordion-item-border";
    private string _borderOpenClass = "accordion-item-border-open";
    private string _borderSharedClass = "accordion-item-border-shared";

    private string _contentClass = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _contentClass = SetClass();
        StateHasChanged();
    }

    private string SetClass()
    {
        StringBuilder sb = new ();

        if (CheckFlush())
        {
            sb.Append(_paddingFlush);
        }
        else
        {
            sb.Append(_paddingDefault);
            sb.Append(" ");
            sb.Append(_borderOpenClass);
            sb.Append(" ");
            //sb.Append(_borderBottomClass);
            sb.Append(" ");
            sb.Append(_borderSharedClass);
        }

        return sb.ToString();
    }

    private void HandleToggle()
    {
        _open = !_open;
        StateHasChanged();
    }

    private bool CheckFlush() => Parent is not null && Parent.Flush;

}