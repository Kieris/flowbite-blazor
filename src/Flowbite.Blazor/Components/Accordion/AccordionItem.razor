@using System.Text
@using Microsoft.Extensions.Primitives
@inherits Frame

<div class="@Class">
  <h2 class="group">
    <button @onclick="@HandleToggle" type="button" 
            class="flex items-center justify-between w-full font-medium text-left group-first:rounded-t-xl border-gray-200 dark:border-gray-700 @_buttonClass @(_open ? ActiveClass : InactiveClass) @(_open && CheckFlush() ? _textFlushOpen : "") @(!_open && CheckFlush() ? _textFlushDefault : "")" 
            aria-expanded="@(_open)">
      @Header
      @if (_open)
      {
        <div name="arrowup">
          <svg class="w-3 h-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5" />
          </svg>
        </div>
      }
      else {
        <div name="arrowdown">
          <svg class="w-3 h-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4" />
          </svg>
        </div>
      }
    </button>
  </h2>
  @if (_open)
  {
    <div>
      <div class="@_contentClass">
        @Body
      </div>
    </div>
  }
  else 
  {
    <div class="hidden">
      <div class="@_contentClass">
        @Body
      </div>
    </div>
  }
</div>

@code {
    [CascadingParameter]
    private Accordion? Parent { get; set; }
  
    [Parameter]
    public RenderFragment Header { get; set; }
  
    [Parameter]
    public RenderFragment Body { get; set; }

    private bool _open = false;
    private string _paddingFlush = "py-5";
    private string _paddingDefault = "p-5";
    private string _textFlushOpen = "text-gray-900 dark:text-white";
    private string _textFlushDefault = "text-gray-500 dark:text-gray-400";
    private string _borderClass = "border-l border-r group-first:border-t";
    private string _borderOpenClass = "border-l border-r";
    private string _borderBottomClass = "border-b";
    private string _borderSharedClass = "border-gray-200 dark:border-gray-700";
    

    private string _contentClass = string.Empty;
    private string _buttonClass = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        DefaultClass = "flex items-center justify-between w-full font-medium text-left group-first:rounded-t-xl border-gray-200 dark:border-gray-700";
        _buttonClass = SetClass(DefaultClass);
        _contentClass = SetClass(string.Empty);
        StateHasChanged();
    }

    private string SetClass(string starter)
    {
      StringBuilder sb = new (starter);
      if (!string.IsNullOrEmpty(starter))
      {
        sb.Append(" ");
      }
      
      if (CheckFlush())
      {
        sb.Append(_paddingFlush);
      }
      else
      {
        sb.Append(_paddingDefault);
        sb.Append(" ");
        sb.Append(_borderOpenClass);
        sb.Append(" ");
        sb.Append(_borderBottomClass);
        sb.Append(" ");
        sb.Append(_borderSharedClass);
      }

      return sb.ToString();
    }
  
    private void HandleToggle()
    {
        _open = !_open;
        StateHasChanged();
    }

    private bool CheckFlush() => Parent is not null && Parent.Flush;
  
}