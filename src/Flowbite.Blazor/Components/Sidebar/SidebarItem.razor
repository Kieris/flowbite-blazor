@inherits BaseComponent

<li class="@Class" style="@Style" @attributes="@UserAttributes">
    <NavLink href="@Href" class="@GetNavLinkClass()" Match="NavLinkMatch.All"
             ActiveClass="@(string.IsNullOrWhiteSpace(Parent?.ActiveClass) && !Href.Equals(string.Empty) ? 
                              "flex items-center p-2 text-base font-normal text-gray-900 bg-gray-200 dark:bg-gray-700 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700" 
                              : Parent?.ActiveClass)">
    @Icon
    <span class="ml-3">@Label</span>
    @if (Subtext is not null)
    {
        @Subtext
    }
  </NavLink>
</li>

@code {
    /// <summary>
    /// The Sidebar parent
    /// </summary>
    [CascadingParameter]
    private Sidebar? Parent { get; set; }
    
    /// <summary>
    /// The icon for the sidebar item
    /// </summary>
    [Parameter]
    public RenderFragment? Icon { get; set; }
  
    /// <summary>
    /// The text/content to the right of the <see cref="Label"/>
    /// </summary>
    [Parameter]
    public RenderFragment? Subtext { get; set; }

    /// <summary>
    /// The link (href) for navigation
    /// </summary>
    [Parameter]
    public string Href { get; set; } = string.Empty;

    /// <summary>
    /// The label for the SidebarItem
    /// </summary>
    [Parameter]
    public string Label { get; set; } = string.Empty;
    
    /// <summary>
    /// Used to get NavLink class because component attributes do not support complex content (mixed C# and markup).
    /// </summary>
    private string GetNavLinkClass()
    {
        return string.IsNullOrWhiteSpace(Parent?.InactiveClass) ? "flex items-center p-2 text-base font-normal text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700" : Parent.InactiveClass;
    }

}