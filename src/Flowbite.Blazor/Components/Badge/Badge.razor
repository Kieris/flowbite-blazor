@using Flowbite.Blazor.SharedEnums
@inherits BaseComponent

@if (Href is not null)
{
    <a href="@Href" class="items-center transition-opacity duration-1000 ease-out @(Hidden ? "hidden" :"inline-flex") 
        @(_hide ? "opacity-0" :"opacity-100") @(Size == BadgeSizes.Custom ? "" : "font-medium px-2.5 py-0.5") 
        @(Pill ? "rounded-full" : "rounded") @_colorClasses[Color] @(Bordered ? $"border dark:bg-neutral-700 {_borderClasses[Color]}" : _darkBgClasses[Color])  
        @(Size == BadgeSizes.Large ? "text-sm" : "text-xs") @Class" style="@Style">
        @ChildContent
        @if (Dismissable)
        {
            <span type="button" @onclick="@Hide" style="cursor: pointer;">
                <svg class="w-2 h-2 ml-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                </svg>
                <span class="sr-only">Remove badge</span>
            </span>
        }
    </a>
}
else
{
    <div class="items-center transition-opacity duration-1000 ease-out @(Hidden ? "hidden" :"inline-flex") 
        @(_hide ? "opacity-0" :"opacity-100") @(Size == BadgeSizes.Custom ? "" : "font-medium px-2.5 py-0.5") 
        @(Pill ? "rounded-full" : "rounded") @_colorClasses[Color] @(Bordered ? $"border dark:bg-neutral-700 {_borderClasses[Color]}" : _darkBgClasses[Color])  
        @(Size == BadgeSizes.Large ? "text-sm" : "text-xs") @Class" style="@Style">
        @ChildContent
        @if (Dismissable)
        {
            <span type="button" @onclick="@Hide" style="cursor: pointer;">
                <svg class="w-2 h-2 ml-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                </svg>
                <span class="sr-only">Remove badge</span>
            </span>
        }
    </div>
}

@code {
    /// <summary>
    /// The badge content
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    
    /// <summary>
    /// Defines if the badge style is bordered
    /// </summary>
    [Parameter]
    public bool Bordered { get; set; }

    /// <summary>
    /// Defines the badge size. This needs to be set as <see cref="BadgeSizes.Custom"/> to
    /// override the size of the icon.
    /// </summary>
    [Parameter]
    public BadgeSizes Size { get; set; } = BadgeSizes.Normal;
    
    /// <summary>
    /// Defines whether a badge is a pill (rounded)
    /// </summary>
    [Parameter]
    public bool Pill { get; set; }
    
    /// <summary>
    /// Defines whether a badge is dismissable
    /// </summary>
    [Parameter]
    public bool Dismissable { get; set; }
    
    /// <summary>
    /// Triggered when the dismiss (x) is clicked on a dismissable badge
    /// </summary>
    [Parameter]
    public EventCallback VisibleChanged { get; set; }
    
    /// <summary>
    /// The href value if the badge is to be a link
    /// </summary>
    [Parameter]
    public string? Href { get; set; }
    
    /// <summary>
    /// The color of the badge. This needs to be set to <see cref="BadgeColors.None"/> to override the colors in Class.
    /// </summary>
    [Parameter]
    public BadgeColors Color { get; set; } = BadgeColors.Primary;

    /// <summary>
    /// Defines whether opacity of badge is 0
    /// </summary>
    private bool _hide;
    /// <summary>
    /// Defines whether badge is hidden. Hidden is not added until after dismiss transition.
    /// </summary>
    [Parameter]
    public bool Hidden { get; set; }

    /// <summary>
    /// The color classes
    /// </summary>
    private Dictionary<BadgeColors, string> _colorClasses = new();
    /// <summary>
    /// The border color classes
    /// </summary>
    private Dictionary<BadgeColors, string> _borderClasses = new();
    /// <summary>
    /// The background dark color classes
    /// </summary>
    private Dictionary<BadgeColors, string> _darkBgClasses = new();


    protected override void OnInitialized()
    {
        base.OnInitialized(); 
        _colorClasses.Add(BadgeColors.Primary, "bg-primary-100 text-primary-800 dark:text-primary-300");
        _colorClasses.Add(BadgeColors.Supporting, "bg-supporting-100 text-supporting-800 dark:text-supporting-300");
        _colorClasses.Add(BadgeColors.Accent, "bg-accent-100 text-accent-800 dark:text-accent-300");
        _colorClasses.Add(BadgeColors.Danger, "bg-danger-100 text-danger-800 dark:text-danger-300");
        _colorClasses.Add(BadgeColors.Success, "bg-success-100 text-success-800 dark:text-success-300");
        _colorClasses.Add(BadgeColors.Warning, "bg-warning-100 text-warning-800 dark:text-warning-300");
        _colorClasses.Add(BadgeColors.Neutral, "bg-neutral-100 text-neutral-800 dark:text-neutral-300");
        _colorClasses.Add(BadgeColors.Pink, "bg-pink-100 text-pink-800 dark:text-pink-300");
        _colorClasses.Add(BadgeColors.None, "");
        
        _darkBgClasses.Add(BadgeColors.Primary, "dark:bg-primary-900");
        _darkBgClasses.Add(BadgeColors.Supporting, "dark:bg-supporting-900");
        _darkBgClasses.Add(BadgeColors.Accent, "dark:bg-accent-900");
        _darkBgClasses.Add(BadgeColors.Danger, "dark:bg-danger-900");
        _darkBgClasses.Add(BadgeColors.Success, "dark:bg-success-900");
        _darkBgClasses.Add(BadgeColors.Warning, "dark:bg-warning-900");
        _darkBgClasses.Add(BadgeColors.Neutral, "dark:bg-neutral-700");
        _darkBgClasses.Add(BadgeColors.Pink, "dark:bg-pink-900");
        _darkBgClasses.Add(BadgeColors.None, "");
        
        _borderClasses.Add(BadgeColors.Primary, "border-primary-400");
        _borderClasses.Add(BadgeColors.Supporting, "border-supporting-400");
        _borderClasses.Add(BadgeColors.Accent, "border-accent-400");
        _borderClasses.Add(BadgeColors.Danger, "border-danger-400");
        _borderClasses.Add(BadgeColors.Success, "border-success-400");
        _borderClasses.Add(BadgeColors.Warning, "border-warning-400");
        _borderClasses.Add(BadgeColors.Neutral, "border-neutral-400");
        _borderClasses.Add(BadgeColors.Pink, "border-pink-400");
        _borderClasses.Add(BadgeColors.None, "");
    }

    /// <summary>
    /// Triggers on parameter update. Looks for attributes and sets classes accordingly, then sets color classes.
    /// </summary>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (UserAttributes.ContainsKey("large"))
        {
            Size = BadgeSizes.Large;
        }
    }

    /// <summary>
    /// Hide the badge
    /// </summary>
    public async void Hide()
    {
        _hide = true;
        await Task.Delay(750);
        Hidden = true;
        await VisibleChanged.InvokeAsync();
        StateHasChanged();
    } 
    
    /// <summary>
    /// Show the badge
    /// </summary>
    public async void Show()
    {
        _hide = false;
        Hidden = false;
        await VisibleChanged.InvokeAsync();
        StateHasChanged();
    }
}